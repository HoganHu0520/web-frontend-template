/* tslint:disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v11.17.5.0 (NJsonSchema v9.10.46.0 (Newtonsoft.Json v9.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming

import 'rxjs-compat/add/observable/fromPromise';
import 'rxjs-compat/add/observable/throw';
import 'rxjs-compat/add/operator/map';
import 'rxjs-compat/add/operator/toPromise';
import 'rxjs-compat/add/operator/mergeMap';
import 'rxjs-compat/add/operator/catch';
import 'rxjs-compat/add/operator/finally';
import 'rxjs-compat/add/observable/of';

import { Observable } from 'rxjs/Observable';
import { Injectable, Inject, Optional, InjectionToken } from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams, HttpResponse, HttpResponseBase, HttpErrorResponse } from '@angular/common/http';
import * as _ from 'lodash';

export const API_BASE_URL = new InjectionToken<string>('API_BASE_URL');

@Injectable()
export class Client {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    private ARTICLES = [
        new ArticleModel({
            id: 1,
            title: 'test',
            mdFile: '/assets/mds/test.md',
        })
    ];

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "/";
    }

    /**
     * @loginRequestModel (optional) 
     * @return Success
     */
    usersLoginPost(loginRequestModel: LoginRequestModel | null | undefined): Observable<TokenResponse> {
        let url_ = this.baseUrl + "/users/login";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(loginRequestModel);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).flatMap((response_ : any) => {
            return this.processUsersLoginPost(response_);
        }).catch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUsersLoginPost(<any>response_);
                } catch (e) {
                    return <Observable<TokenResponse>><any>Observable.throw(e);
                }
            } else
                return <Observable<TokenResponse>><any>Observable.throw(response_);
        });
    }

    protected processUsersLoginPost(response: HttpResponseBase): Observable<TokenResponse> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).flatMap(_responseText => {
            let result200: any = null;
            result200 = _responseText === "" ? null : <TokenResponse>JSON.parse(_responseText, this.jsonParseReviver);
            return Observable.of(result200);
            });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).flatMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Observable.of<TokenResponse>(<any>null);
    }

    articleList(): Observable<ArticleModel[]> {
        return Observable.fromPromise(Promise.resolve(this.ARTICLES));
    }

    article(id: number): Observable<ArticleModel> {
        return Observable.fromPromise(Promise.resolve(_.find(this.ARTICLES, { id })));
    }
}

export class LoginRequestModel implements ILoginRequestModel {
    userName?: string | undefined;
    password?: string | undefined;
    isLoginAdmin?: boolean | undefined;

    constructor(data?: ILoginRequestModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.userName = data["userName"];
            this.password = data["password"];
            this.isLoginAdmin = data["isLoginAdmin"];
        }
    }

    static fromJS(data: any): LoginRequestModel {
        data = typeof data === 'object' ? data : {};
        let result = new LoginRequestModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["userName"] = this.userName;
        data["password"] = this.password;
        data["isLoginAdmin"] = this.isLoginAdmin;
        return data; 
    }
}

export interface ILoginRequestModel {
    userName?: string | undefined;
    password?: string | undefined;
    isLoginAdmin?: boolean | undefined;
}

export class ArticleModel implements IArticleModel {
    title?: string | undefined;
    mdFile?: string | undefined;
    id?: number | undefined;

    constructor(data?: IArticleModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.title = data["title"];
            this.mdFile = data["mdFile"];
            this.id = data["id"];
        }
    }

    static fromJS(data: any): ArticleModel {
        data = typeof data === 'object' ? data : {};
        let result = new ArticleModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["title"] = this.title;
        data["mdFile"] = this.mdFile;
        data["id"] = this.id;
        return data; 
    }
}

export interface IArticleModel {
    title?: string | undefined;
    mdFile?: string | undefined;
    id?: number | undefined;
}

export class TokenResponse implements ITokenResponse {
    accessToken?: string | undefined;
    identityToken?: string | undefined;
    tokenType?: string | undefined;
    refreshToken?: string | undefined;
    errorDescription?: string | undefined;
    expiresIn?: number | undefined;
    raw?: string | undefined;
    json?: any | undefined;
    exception?: any | undefined;
    isError?: boolean | undefined;
    errorType?: TokenResponseErrorType | undefined;
    httpStatusCode?: TokenResponseHttpStatusCode | undefined;
    httpErrorReason?: string | undefined;
    error?: string | undefined;

    constructor(data?: ITokenResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.accessToken = data["accessToken"];
            this.identityToken = data["identityToken"];
            this.tokenType = data["tokenType"];
            this.refreshToken = data["refreshToken"];
            this.errorDescription = data["errorDescription"];
            this.expiresIn = data["expiresIn"];
            this.raw = data["raw"];
            if (data["json"]) {
                this.json = {};
                for (let key in data["json"]) {
                    if (data["json"].hasOwnProperty(key))
                        this.json[key] = data["json"][key];
                }
            }
            if (data["exception"]) {
                this.exception = {};
                for (let key in data["exception"]) {
                    if (data["exception"].hasOwnProperty(key))
                        this.exception[key] = data["exception"][key];
                }
            }
            this.isError = data["isError"];
            this.errorType = data["errorType"];
            this.httpStatusCode = data["httpStatusCode"];
            this.httpErrorReason = data["httpErrorReason"];
            this.error = data["error"];
        }
    }

    static fromJS(data: any): TokenResponse {
        data = typeof data === 'object' ? data : {};
        let result = new TokenResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["accessToken"] = this.accessToken;
        data["identityToken"] = this.identityToken;
        data["tokenType"] = this.tokenType;
        data["refreshToken"] = this.refreshToken;
        data["errorDescription"] = this.errorDescription;
        data["expiresIn"] = this.expiresIn;
        data["raw"] = this.raw;
        if (this.json) {
            data["json"] = {};
            for (let key in this.json) {
                if (this.json.hasOwnProperty(key))
                    data["json"][key] = this.json[key];
            }
        }
        if (this.exception) {
            data["exception"] = {};
            for (let key in this.exception) {
                if (this.exception.hasOwnProperty(key))
                    data["exception"][key] = this.exception[key];
            }
        }
        data["isError"] = this.isError;
        data["errorType"] = this.errorType;
        data["httpStatusCode"] = this.httpStatusCode;
        data["httpErrorReason"] = this.httpErrorReason;
        data["error"] = this.error;
        return data; 
    }
}

export interface ITokenResponse {
    accessToken?: string | undefined;
    identityToken?: string | undefined;
    tokenType?: string | undefined;
    refreshToken?: string | undefined;
    errorDescription?: string | undefined;
    expiresIn?: number | undefined;
    raw?: string | undefined;
    json?: any | undefined;
    exception?: any | undefined;
    isError?: boolean | undefined;
    errorType?: TokenResponseErrorType | undefined;
    httpStatusCode?: TokenResponseHttpStatusCode | undefined;
    httpErrorReason?: string | undefined;
    error?: string | undefined;
}

export enum TokenResponseErrorType {
    _0 = 0, 
    _1 = 1, 
    _2 = 2, 
    _3 = 3, 
    _4 = 4, 
}

export enum TokenResponseHttpStatusCode {
    _100 = 100, 
    _101 = 101, 
    _200 = 200, 
    _201 = 201, 
    _202 = 202, 
    _203 = 203, 
    _204 = 204, 
    _205 = 205, 
    _206 = 206, 
    _300 = 300, 
    _301 = 301, 
    _302 = 302, 
    _303 = 303, 
    _304 = 304, 
    _305 = 305, 
    _306 = 306, 
    _307 = 307, 
    _401 = 401, 
    _402 = 402, 
    _403 = 403, 
    _404 = 404, 
    _405 = 405, 
    _406 = 406, 
    _407 = 407, 
    _408 = 408, 
    _409 = 409, 
    _410 = 410, 
    _411 = 411, 
    _412 = 412, 
    _413 = 413, 
    _414 = 414, 
    _415 = 415, 
    _416 = 416, 
    _417 = 417, 
    _426 = 426, 
    _500 = 500, 
    _501 = 501, 
    _502 = 502, 
    _503 = 503, 
    _504 = 504, 
    _505 = 505, 
}

export class SwaggerException extends Error {
    message: string;
    status: number; 
    response: string; 
    headers: { [key: string]: any; };
    result: any; 

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isSwaggerException = true;

    static isSwaggerException(obj: any): obj is SwaggerException {
        return obj.isSwaggerException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): Observable<any> {
    if(result !== null && result !== undefined)
        return Observable.throw(result);
    else
        return Observable.throw(new SwaggerException(message, status, response, headers, null));
}

function blobToText(blob: any): Observable<string> {
    return new Observable<string>((observer: any) => {
        if (!blob) {
            observer.next("");
            observer.complete();
        } else {
            let reader = new FileReader(); 
            reader.onload = function() { 
                observer.next(this.result);
                observer.complete();
            }
            reader.readAsText(blob); 
        }
    });
}